#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ] && [ "$STACK" != "heroku-18" ]; then
	echo "Need heroku-16 or heroku-18 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

NODEJS_VERSION=${NODEJS_VERSION:-12.18.3}
DOTNET_SDK_VERSION=${DOTNET_SDK_VERSION:-3.1.201}
DOTNET_RUNTIME_VERSION=${DOTNET_RUNTIME_VERSION:-3.1.3}
BUILD_CONFIGURATION=${BUILD_CONFIGURATION:-Release}

install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION
install_nodejs "$BUILD_DIR" "$CACHE_DIR" "${NODEJS_VERSION}"

export PATH="${BUILD_DIR}/.heroku/dotnet:${PATH}"

cd $BUILD_DIR

if [ -f ${BUILD_DIR}/dotnet-tools.json ] || [ -f ${BUILD_DIR}/.config/dotnet-tools.json ]; then
	dotnet tool restore
fi

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs -o -iname Program.cs -o -iname Program.fs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.fsproj -o -name *.csproj; x=`dirname "$x"`; done)
fi

if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi

topic "Project Name: $PROJECT_NAME"

if [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.0')" ]; then
	topic "WARNING"
	info "For netcoreapp2.0 use https://github.com/jincod/dotnetcore-buildpack#v2.1.200" | indent
	info "More info https://github.com/jincod/dotnetcore-buildpack/issues/44" | indent
fi
export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
INDIGO='\033[0;35m'
NC='\033[0m' # No Color

topic "Publishing your project"
OUTPUT=$(mktemp)
BUILD_ERROR=0
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration ${BUILD_CONFIGURATION} --runtime linux-x64 || BUILD_ERROR=$?
if [ ${BUILD_ERROR} -ne 0 ]; then
  echo -e "${RED}"
  cat ${OUTPUT}
  echo -e "${NC}"
  false
else
  topic "Published"
fi

if [ -f ${BUILD_DIR}/Procfile ] && grep -q '^web:' ${BUILD_DIR}/Procfile ; then
	topic "WARNING"
	echo "Be careful with custom Procfile" | indent
else
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ./${PROJECT_NAME}
EOT
fi

# Cleanup everything that isn't the Procfile or heroku_output folder where our built app lives
topic "Cleaning up"
ls ${BUILD_DIR} | egrep -v "Procfile|heroku_output" | xargs rm -rf {} \;


echo ""
echo -e "${RED}"    "███████╗██╗   ██╗███╗   ██╗ ██████╗ ██████╗  █████╗ ███████╗████████╗ ${NC}"
echo -e "${ORANGE}" "██╔════╝██║   ██║████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝╚══██╔══╝ ${NC}"
echo -e "${YELLOW}" "███████╗██║   ██║██╔██╗ ██║██║     ██║   ██║███████║███████╗   ██║    ${NC}"
echo -e "${GREEN}"  "╚════██║██║   ██║██║╚██╗██║██║     ██║   ██║██╔══██║╚════██║   ██║    ${NC}"
echo -e "${BLUE}"   "███████║╚██████╔╝██║ ╚████║╚██████╗╚██████╔╝██║  ██║███████║   ██║    ${NC}"
echo -e "${INDIGO}" "╚══════╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝    ${NC}"
echo -e "${NC}"
